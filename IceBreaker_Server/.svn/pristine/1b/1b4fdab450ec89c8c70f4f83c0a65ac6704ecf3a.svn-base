package team.mosaic.icebreaker.playerstructure;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import team.mosaic.icebreaker.net.MyServerSocket;
import team.mosaic.icebreaker.service.AccountService;
import team.mosaic.icebreaker.service.GameService;
import team.mosaic.icebreaker.serviceimp.AccountServiceImp;
import team.mosaic.icebreaker.serviceimp.GameServiceImp;
import team.mosaic.icebreaker.vo.AccountVO;
import team.mosaic.icebreaker.vo.GainVO;
import team.mosaic.icebreaker.vo.MessageVO;
/**
 * 玩家类，负责与客户端玩家的交互
 * @author HJW
 *
 */
public class Player extends Thread {
	private String id;//玩家id
	private MyServerSocket mss;
	private Socket s;

	private ObjectInputStream ois;//输入
	private ObjectOutputStream oos;//输出
	private MessageVO mvo;//消息包
	private AccountService accountService;//帐户业务逻辑对象
	private GameService gameService;//游戏业务逻辑对象
	//玩家交互
	private CooperationPair coop;//协作双方对象
	private CompetitionPair comp;//pk双方对象

	public Player(MyServerSocket mss, Socket s) {
		this.mss = mss;
		this.s = s;
		accountService = new AccountServiceImp();
		gameService = new GameServiceImp();
	}

	public void run() {
		try {
			ois = new ObjectInputStream(s.getInputStream());
			oos = new ObjectOutputStream(s.getOutputStream());
			while (true) {
				mvo = (MessageVO) ois.readObject();
				dealWithMessage(mvo);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			shut();
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 得到玩家id
	 * @return 玩家id
	 */
	public String getID() {
		return id;
	}
	
	public void setCooperationPair(CooperationPair cp){
		this.coop = cp;
	}
	
	public void setCompetitionPair(CompetitionPair cp){
		this.comp = cp;
	}
	
	/**
	 * 结束该玩家线程
	 */
	@SuppressWarnings("deprecation")
	private void shut(){
		if (id != null)
			mss.removeMember(this);
		System.out.println(id+" logoff");
		this.stop();
	}
	/**
	 * 发送消息给客户端
	 * @param mvo 消息包
	 * @throws IOException
	 */
	private void sendMessage(MessageVO mvo) throws IOException {
		oos.writeObject(mvo);
		oos.flush();
	}
	/**
	 * 处理接收到的客户端消息
	 * @param mvo 消息包
	 * @throws IOException
	 */
	private void dealWithMessage(MessageVO mvo) throws IOException {
		String cmd = mvo.getCommand();
		String recmd = "re-" + cmd;

		switch (cmd) {
		case "register":
			AccountVO avo2 = (AccountVO) mvo.getObject();
			boolean isRegistered = accountService.register(avo2);
			sendMessage(new MessageVO(recmd, isRegistered));
			break;
		case "signin":
			AccountVO avo = (AccountVO) mvo.getObject();
			boolean isVerified = accountService.verify(avo);
			if (isVerified) {// 登陆成功
				id = avo.getID();
				mss.addMember(this);
				System.out.println(id+" login");
			}
			sendMessage(new MessageVO(recmd, isVerified));
			break;
		case "signout":
			shut();
			break;
		case "info":
			break;
		case "friendrank":
			break;
		case "worldrank":
			break;
		case "usetool":
			break;
		case "buytool":
			break;
		case "act":
			break;
		case "coopwithpal":
			break;
		case "cooprandom":
			break;
		case "replycoop":
			break;
		case "pkwithpal":
			break;
		case "pkrandom":
			break;
		case "replypk":
			break;
		case "endsingle":
			GainVO gvo = (GainVO)mvo.getObject();
			boolean isAdvance = gameService.submitScore(id, gvo);
			sendMessage(new MessageVO(recmd, isAdvance));
			break;
		default:
			System.out.println("Undefined instruction.");
			break;
		}
	}

}
